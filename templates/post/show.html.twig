{% extends 'base.html.twig' %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('css/show_post.css')}}">
{% endblock %}

{% block title %}
{% if post != NULL %}
    {{ post.title }}
{% else %}
    Post introuvable
{% endif %}
{% endblock %}

{% block body %}

{% if post == NULL %}

    <h1>Erreur: l'article demandé n'existe pas ou a été supprimé</h1>

{% else %}

    <div class="post">
        <h1 class="display-3">{{ post.title }}</h1>
        <p class="lead">Par {{ post.author.firstName ~ ' ' ~ post.author.lastName ~ ' (le ' ~ post.creationDate | date('d/m/Y') ~ " à " ~ post.creationDate | date('H:i') ~ ')' }} </p>
        <p class="lead">{{ "Catégorie : " ~ post.category.name }} </p>
        <hr class="my-4">
        <p class="description">{{ post.description | raw }}</p>
        <p class="badge-info">
           {% if post.status == 0 %}  
                {{ " ouvert"}}
            {% else %}
                {{" fermé"}}
            {% endif %}
        </p>
    </div>

    <fieldset class="comment-group">
        <legend>Discussions</legend>
        {% if app.user %}
            <form class="form-group" action="{{path('create_comment',{'id':post.id})}}" method="POST" id="add_comment_form">
                <textarea name="content" cols="100" rows="3" placeholder="Ajoutez votre commentaire..." class="form-control"></textarea>
                <button type="submit" class="btn-primary" id="submit_button">Ajouter</button>
            </form>
        {% else %}
            <div class="badge-warning">
                <p class=""><b><a href="{{path('app_login')}}" class="alert-link">Connectez-vous</a></b> pour ajouter un commentaire</p>
            </div>
        {% endif %}
        
        <div id="comments_area">
        {% for comment in comments %}
            <div class="comment-div" id="commentDiv{{comment.id}}">
                <div class="comment-header">
                    <p class="comment-author">{{comment.author.firstName ~ ' ' ~ comment.author.lastName}}</p>
                    <div class="comment-header-right">
                        <p class="comment-date">
                        {{comment.creationDate | date('d/m/Y') ~ " à " ~ comment.creationDate | date('H:i')}} 
                        {% if comment.updateDate != NULL %}
                            {{ ' (modifié le ' ~ comment.updateDate | date('d/m/Y') ~ " à " ~ comment.updateDate | date('H:i') ~ ')'}}
                        {% endif %}
                        </p>
                        {% if comment.author == app.user %}
                            <a class="delete-comment" id="{{comment.id}}" href="{{ path('delete_comment',{id:comment.id}) }}"><img src="{{ asset('img/garbage.png') }}" alt="garbage.png"></a>
                        {% endif %}
                    </div>
                    
                </div>
                <div>
                    <p class="comment-content">{{comment.content | raw}}</p>
                    <div class="comment-rate-group">
                        <a {% if app.user %} href="{{ path('comment_uprate',{'id':comment.id}) }}" {% else %}title="Connectez-vous pour réagir" href="{{ path('app_login') }}"{% endif %} class="js-uprate btn-up" id="{{comment.id}}"><img src="{{ asset("img/up.png") }}" alt="up.png"></a>
                        <span id="ratecount{{comment.id}}"> {{comment.sumCommentRates}}</span>
                        <a {% if app.user %} href="{{path('comment_downrate',{'id':comment.id})}}" {% else %}title="Connectez-vous pour réagir" href="{{ path('app_login') }}"{% endif %} class="js-downrate btn-down" id="{{comment.id}}"> <img src="{{ asset("img/down.png") }}" alt="up.png"></a>
                    </div>
                </div>
            </div>
        {% endfor %}


    </fieldset>
{% endif %}
{% endblock %}

{% block javascripts %}
    <script>
        console.log("debug :");
        {% if app.user %}
        function onClickUprateBtn(event) {
            console.log("uprate function");
            event.preventDefault();
            const url = this.href;
            this.disable = true;
            if(url != null){
                console.log("url !=NULL");
                const rateCount = document.getElementById(`ratecount${this.id}`);
                axios.get(url).then(function(response){
                    console.log("response request:");
                    console.log(response.data.rates);
                    rateCount.textContent = response.data.rates;
                });
            }
            this.disable = false;

        }

        function onClickDownrateBtn(event) {
            console.log("downrate function");
            event.preventDefault();
            const url = this.href;
            if(url != null){
                console.log("url !=NULL");
                const rateCount = document.getElementById(`ratecount${this.id}`);
                axios.get(url).then(function(response){
                    console.log("response request:");
                    rateCount.textContent = response.data.rates;
                });
            }
        }

        function onclickSubmitButton(){
            console.log("onclicksubmitbutton function");
            event.preventDefault();
            const form =  document.querySelector('#add_comment_form');
            const textarea = form.querySelector('textarea');
            const button = this;

            // Interrupting input

            button.disabled = true;
            textarea.disabled = true;
            button.innerHTML = "Publication...";

            // Extracting and packaging data
            const data = new FormData();
            const content = textarea.value;
            console.log(content);
            data.append('content',content);

            // Sending data
            const url = form.action;
            const requestAjax = new XMLHttpRequest();
            requestAjax.open('POST',url);
            requestAjax.send(data);
            requestAjax.onload = function () {
                console.log("onload function");
                const response = JSON.parse(requestAjax.responseText);
                var newDiv = document.createElement("div");
                newDiv.setAttribute('class',"card border-dark mb-3");
                newDiv.setAttribute('style',"max-width: 100%;");
                newDiv.innerHTML = `
                <div class="comment-div" id="commentDiv${response.id}">
                    <div class="comment-header">
                        <p class="comment-author">${userFirstName} ${userLastName}</p>
                        <a class="close" id="${response.id}" href="/comment/delete/${response.id}">&times;</a>
                        <p class="comment-date">
                        ${response.creationDate}
                        </p>
                    </div>
                    <div>
                        <p class="comment-content">${content}</p>
                        <div class="comment-rate-group">
                            <a href="/comment/uprate/${response.id}" class="js-uprate btn-up" id="${response.id}"><img src="/img/up.png" alt="up.png"></a>
                            <span id="ratecount${response.id}">0</span>
                            <a href="/comment/downrate/${response.id}" class="js-downrate btn-down" id="${response.id}"> <img src="/img/down.png" alt="up.png"></a>
                        </div>
                    </div>
                </div>`

                newDiv.querySelector('a.js-uprate').addEventListener('click',onClickUprateBtn);
                newDiv.querySelector('a.js-downrate').addEventListener('click',onClickDownrateBtn);
                document.getElementById("comments_area").prepend(newDiv);
                textarea.value = "";
                button.disabled = false;
                textarea.disabled = false;
                button.innerHTML = "Ajouter";
            }
        }

        function onClickDeleteBtn(){
            console.log("onClickCloseBtn function");
            event.preventDefault();
            const url = this.href;
            const id = this.id;
            if(url != null){
                axios.get(url).then(function(response){
                    console.log("response request message:");
                    console.log(response.data);
                    if(response.data.code == 200){
                        document.getElementById(`commentDiv${id}`).remove()
                    }else{
                        this.innerHTML = "Error";
                    }
                });
            }
        }

        const userFirstName = "{{app.user.firstName}}";
        const userLastName = "{{app.user.lastName}}";


        document.querySelectorAll('a.js-uprate').forEach( 
            link => link.addEventListener('click',onClickUprateBtn)
        );

        document.querySelectorAll('a.js-downrate').forEach( 
            link => link.addEventListener('click',onClickDownrateBtn)
        );
        
        document.querySelector("#submit_button").addEventListener('click',onclickSubmitButton);

        document.querySelectorAll('.delete-comment').forEach( 
            link => link.addEventListener('click',onClickDeleteBtn)
        );

        {% endif %}
       
    </script>
{% endblock %}